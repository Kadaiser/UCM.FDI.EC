	.global rgb2gray
	.global apply_gaussian
	.extern gaussian

	.equ COEF1, 3483
	.equ COEF2, 11718
	.equ COEF3, 1183
	.equ DIVI, 16384

	.text
rgb2gray:
	push {r4,r5,r6,lr}
	mov r6,#0
	mov r7,#0 //resultado
	ldr r3,=COEF1
	ldr r4,=COEF2
	ldr r5,=COEF3

	ldrb r1,[r0]
	mul r6,r1,r3
	add r7,r7,r6
	add r0,r0, #1
	ldrb r1,[r0]
	mul r6,r1,r4
	add r7,r7,r6
	add r0,r0, #1
	ldrb r1,[r0]
	mul r6,r1,r5
	add r7,r7,r6
	mov r0,r7

	b div16384
	pop {r4,r5,r6,lr}

	mov pc,lr



div16384:
Prologo:
	push {r4,r5,r7,lr}
mov r4,#0
mov r5, #2
mov r6,#16384

for:
	cmp r0,#1
	ble finfor
	sub r0,r0, r6
	add r4,r4,#1

	b for
finfor:
	mov r0,r4
	pop {r4,r5,r7,lr}
	mov pc,lr

//----------------------RGB2GRAY ARM METHOD----------------------------------//
// PARAM R0		: DIRECCION DE UN ELEMNTO PIXELRGB DE 3 UNSIGNED CHAR
// RETURN R0	: unsigned char
/*
rgb2gray:
		PUSH {LR, R4 - R6}
		LDR R4, =COEF1
		LDR R5, =COEF2
		LDR R6, =COEF3

		LDRB R1,[R0]				//R1 almacena el valor del elemento R (LITTLE ENDIAN)
		MUL R2,R1,R4				//R2 = R*3483
		LDRB R1,[R0,#1] 			//R1 almacena el valor del elemento G (LITTLE ENDIAN)
		MUL R3,R1,R5				//R3 = G*11718
		ADD R2,R2,R3				//R2 = (R*3483) + (G*11718)
		LDRB R1,[R0,#2] 			//R1 almacena el valor del elemento B (LITTLE ENDIAN)
		MUL R3,R1,R6				//R3 = G*1183
		ADD R2,R2,R3				//R2 = (R*3483) + (G*11718) + (B*1183)
		MOV R0,R2
		BL divdiv16384				//LLAMADA A SUBRUTINA R0 = (R*3483) + (G*11718) + (B*1183)
		POP {LR, R4 - R6}
		MOV PC, LR					// R0 = ( (R*3483) + (G*11718) + (B*1183) )/16384

div16384: push {r4,fp}
		  mov r0, r0, lsr #14		//aprovechamos que es potencia de 2 ^14r
		  pop {r4,fp}
		  mov pc, lr
*/

//----------------------GAUSSIAN ARM METHOD----------------------------------//
/**
void apply_gaussian(unsigned char im1[], unsigned char im2[], int width, int height)
{
	int i,j;
	for(i =0 ; i< width; i++)
		for(j =0 ; j< height; j++)
			im2[i*width + j] = gaussian(im1,width,height,i,j);
}
PARAMETROS
R0 PRIMERA DIRECCION DE unsigned char im1[]
R1 PRIMERA DIRECCION DE  unsigned char im2[]
R2 DIRECCION int width
R3 DIRECCION int height
*/

apply_gaussian:
		PUSH{LR}
		LDR	R4,R2		//R4 = widht
		LDR R5,R3		//R5 = heigth
		MOV R6,#0		//CONTADOR i = 0
fori:
		CMP R6,R4		//i < widght
		BLT finfori
		MOV R7,#0		//CONTADOR J = 0

forj:
		CMP R7,R5		//j > height
		BLT finforj
		PUSH{R0-R3}
		MOV R1,R4
		MOV R2,R5
		MOV R3,R6
		MOV R4,R7
		/*
		* R0 PRIMERA DIRECCION DE unsigned char im1[]
		* R1 VALOR
		* R2
		* R3
		* R4
		*/
		BL gaussian
		MOV R8, R0		//RESULTADO EN R8
		POP{R0-R3}

		ADD R9, R4, R7//width + j

		ADD R7,R7,#1
		BL

finforj:
		ADD R6,R6,#1
		B fori

finfori:
		POP{LR}
		MOV PC, LR

		.end
